# -*- coding: utf-8 -*-
"""LinearRegressionSongModeling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/174jOEHP7GtH88l36xGR92ryvpz5-z-55
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv("song_data.csv")

#Examine Head of the Data
df.head()

df.shape #(rows, columns)

df.info()

df.columns

df.describe

print("Unique song popularity Values: " + str(len(df['song_popularity'].unique())))

print("Worst Song Popularity: " + str(max(df['song_popularity'])))

print("Best Song Popularity: " + str(min(df["song_popularity"])))

x = df[['song_duration_ms', 'acousticness',
       'danceability', 'energy', 'instrumentalness', 'key', 'liveness',
       'loudness', 'audio_mode', 'speechiness', 'tempo', 'time_signature',
       'audio_valence']]

y = df['song_popularity']

from sklearn.model_selection import train_test_split

x_train, x_test,y_train, y_test = train_test_split(x,y,test_size = 0.2)

from sklearn.linear_model import LinearRegression

lm = LinearRegression()
lm.fit(x_train, y_train)
print(lm.coef_)

pd.DataFrame(lm.coef_, x.columns, columns = ["Coefficient"])

predictions = lm.predict(x_test)
print(predictions)

from sklearn import metrics

#mean absolute error (how far apart the datapoints is on average from the true one)
metrics.mean_absolute_error(y_test, predictions)

#Mean Sqaure Error - how close regression line is to a set of data points
metrics.mean_squared_error(y_test, predictions)