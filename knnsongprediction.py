# -*- coding: utf-8 -*-
"""KNNSongPrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rcTGdsB33EzbFb8UwqmqboVb7c_Kz5ZY
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv("song_data.csv")
#Examine Head of the Data
df.head()

df.info()

df.columns

df.describe

x = df.drop("song_popularity", axis = 1)

x = x.drop("song_name", axis = 1)

y = df["song_popularity"]

x = x.values
y = y.values

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.3)

from sklearn.neighbors import KNeighborsRegressor
model = KNeighborsRegressor(n_neighbors = 2)

model.fit(x_train,y_train)

predictions = model.predict(x_test)

from sklearn import metrics

metrics.mean_absolute_error(y_test, predictions)

metrics.mean_squared_error(y_test, predictions)

from sklearn.model_selection import GridSearchCV
parameters = {"n_neighbors": range(1, 50)}
gridsearch = GridSearchCV(KNeighborsRegressor(), parameters)
gridsearch.fit(x_train, y_train)

gridsearch.best_params_

import math
train_preds_grid = gridsearch.predict(x_train)
train_mse = metrics.mean_squared_error(y_train, train_preds_grid)
train_rmse = math.sqrt(train_mse)
test_preds_grid = gridsearch.predict(x_test)
test_mse = metrics.mean_squared_error(y_test, test_preds_grid)
test_rmse = math.sqrt(test_mse)
test_mae = metrics.mean_absolute_error(y_test, predictions)
print("Mean Absolute Error: " + str(test_mae))
print("Mean Squared Training Error:" + str(train_rmse))
print("Mean Squared Test Error: " + str(test_rmse))